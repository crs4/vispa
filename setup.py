# BEGIN_COPYRIGHT
# 
# Copyright (C) 2013-2014 CRS4.
# 
# This file is part of vispa.
# 
# vispa is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# vispa is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along with
# vispa.  If not, see <http://www.gnu.org/licenses/>.
# 
# END_COPYRIGHT

"""
VISPA (Vector Integration Site Parallel Analysis) is a bioinformatics
pipeline for viral integration site (IS) identification and annotation.
"""
import os, datetime
from distutils.core import setup
from distutils.errors import DistutilsSetupError
from distutils.command.build_py import build_py as du_build_py
from distutils.command.sdist import sdist as du_sdist

CURRENT_YEAR = datetime.datetime.now().year

DESCRIPTION = __doc__.split("\n", 1)[0]
LONG_DESCRIPTION = __doc__
URL = "https://github.com/crs4/vispa"
DOWNLOAD_URL = URL
LICENSE = 'GPL'
CLASSIFIERS = [
  "Programming Language :: Python",
  "License :: OSI Approved :: GNU General Public License (GPL)",
  "Operating System :: POSIX :: Linux",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
  "Intended Audience :: Science/Research",
  ]
PLATFORMS = ["Linux"]
try:
  with open("NAME") as f:
    NAME = f.read().strip()
  with open("VERSION") as f:
    VERSION = f.read().strip()
except IOError:
  raise DistutilsSetupError("failed to read name/version info")
AUTHOR_INFO = [
  ("Simone Leo", "simone.leo@crs4.it"),
  ("Massimiliano Orsini", "massimiliano.orsini@crs4.it"),
  ]
MAINTAINER_INFO = [
  ("Simone Leo", "simone.leo@crs4.it"),
  ]
AUTHOR = ", ".join(t[0] for t in AUTHOR_INFO)
AUTHOR_EMAIL = ", ".join("<%s>" % t[1] for t in AUTHOR_INFO)
MAINTAINER = ", ".join(t[0] for t in MAINTAINER_INFO)
MAINTAINER_EMAIL = ", ".join("<%s>" % t[1] for t in MAINTAINER_INFO)


mtime = lambda fn: os.stat(fn).st_mtime


def write_authors(filename="AUTHORS"):
  if os.path.exists(filename) and mtime(__file__) <= mtime(filename):
    return
  with open(filename, "w") as f:
    f.write("%s is developed by:\n" % NAME)
    for name, email in AUTHOR_INFO:
      f.write(" * %s <%s>\n" % (name, email))
    f.write("and maintained by:\n")
    for name, email in MAINTAINER_INFO:
      f.write(" * %s <%s>\n" % (name, email))


def write_readme(filename="README"):
  if os.path.exists(filename) and mtime(__file__) <= mtime(filename):
    return
  with open(filename, "w") as f:
    f.write("%s\n" % DESCRIPTION)
    f.write("%s\n\n" % ("=" * len(DESCRIPTION)))
    f.write("Copyright %d CRS4.\n" % CURRENT_YEAR)


def write_version(filename="bl/tiget/version.py"):
  if os.path.exists(filename) and mtime("VERSION") <= mtime(filename):
    return
  with open(filename, "w") as f:
    f.write("# GENERATED BY setup.py\n")
    f.write("version='%s'\n" % VERSION)


class build_py(du_build_py):
  def run(self):
    write_version()
    du_build_py.run(self)


class sdist(du_sdist):
  def run(self):
    write_readme()
    write_authors()
    du_sdist.run(self)


if __name__ == "__main__":
  write_authors()
  setup(
    name=NAME,
    description=DESCRIPTION,
    long_description=LONG_DESCRIPTION,
    url=URL,
    download_url=DOWNLOAD_URL,
    license=LICENSE,
    classifiers=CLASSIFIERS,
    author=AUTHOR,
    author_email=AUTHOR_EMAIL,
    maintainer=MAINTAINER,
    maintainer_email=MAINTAINER_EMAIL,
    platforms=PLATFORMS,
    version=VERSION,
    packages=[
      'bl',
      'bl.tiget',
      'bl.tiget.pipeline',
      'bl.tiget.mr',
      'bl.tiget.mr.blast',
      ],
    cmdclass={"sdist": sdist, "build_py": build_py},
    )
